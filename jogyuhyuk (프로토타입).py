# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CXJ1rMnEJgPzHm8faZIgKOFKv5hqwoSc
"""

# 실행계획 1단계
# 1. 다중 이미지 창조적 융합
# - BLIP으로 이미지 내용 분석
# - 프롬프트 추출 + Stable Diffusion 융합
# 2. 스타일 이미지 분석 및 적용
# - CLIP, BLIP으로 스타일 특징 추출
# - 스타일 프롬프트 자동 생성

# 전체 파이프라인
# 다중 이미지 -> 융합 -> 스타일 적용 -> 최종 결과

# ==================================================
# 셀 1: 필요한 라이브러리 설치
# ==================================================
!pip install diffusers transformers accelerate safetensors
!pip install controlnet-aux
!pip install datasets

# GPU 확인
import torch
print(f"CUDA 사용 가능: {torch.cuda.is_available()}")
if torch.cuda.is_available():
    print(f"GPU: {torch.cuda.get_device_name()}")
    print(f"VRAM: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f}GB")

# ==================================================
# 셀 2: 메인 시스템 코드
# ==================================================

import torch
import numpy as np
from PIL import Image
from diffusers import StableDiffusionImg2ImgPipeline, DiffusionPipeline
from transformers import CLIPProcessor, CLIPModel, BlipProcessor, BlipForConditionalGeneration
import os
import random

class CreativeFusionSystem:
    def __init__(self):
        print("창조적 융합 시스템 초기화 중...")

        # Stable Diffusion 파이프라인 (창조적 융합용)
        self.sd_pipeline = StableDiffusionImg2ImgPipeline.from_pretrained(
            "runwayml/stable-diffusion-v1-5",
            torch_dtype=torch.float16,
            safety_checker=None,
            requires_safety_checker=False
        )

        # CLIP 모델 (이미지 분석용)
        self.clip_model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
        self.clip_processor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

        # BLIP 모델 (이미지 캡셔닝용)
        self.blip_processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
        self.blip_model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

        # 메모리 최적화
        self.sd_pipeline.enable_attention_slicing()
        self.sd_pipeline.enable_model_cpu_offload()

        print("초기화 완료!")

    # 폴더에서 모든 이미지를 로드
    def load_images(self, folder_path):

        valid_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.webp']
        images = []

        print(f"{folder_path}에서 이미지 로드 중...")

        if not os.path.exists(folder_path):
            print(f"폴더를 찾을 수 없습니다: {folder_path}")
            return images

        for filename in os.listdir(folder_path):
            if any(filename.lower().endswith(ext) for ext in valid_extensions):
                try:
                    img_path = os.path.join(folder_path, filename)
                    img = Image.open(img_path).convert('RGB')
                    images.append({
                        'image': img,
                        'filename': filename,
                        'size': img.size
                    })
                    print(f"{filename} 로드 성공 ({img.size})")
                except Exception as e:
                    print(f"{filename} 로드 실패: {e}")

        print(f"총 {len(images)}장 로드 완료!")
        return images

    # BLIP을 사용해 이미지의 내용을 분석
    def analyze_image_content(self, image):

        try:
            inputs = self.blip_processor(image, return_tensors="pt")
            out = self.blip_model.generate(**inputs, max_length=50)
            caption = self.blip_processor.decode(out[0], skip_special_tokens=True)
            return caption
        except Exception as e:
            print(f"이미지 분석 실패: {e}")
            return "unknown object"

    # 다중 이미지 내용을 기반으로 창조적인 융합 프롬프트를 생성
    def create_fusion_prompt(self, image_contents, fusion_style="surreal"):

        print("창조적 융합 프롬프트 생성 중...")

        # 이미지 내용들을 융합 프롬프트로 변환
        contents = [content.replace("a ", "").replace("an ", "") for content in image_contents]

        fusion_templates = {
            "surreal": [
                f"{contents[0]} interacting with {contents[1]} in a dreamlike scene",
                f"{contents[0]} and {contents[1]} merged into one fantastical creature",
                f"{contents[0]} growing from {contents[1]} in an impossible world",
                f"{contents[0]} wrapped around {contents[1]} floating in space"
            ],
            "organic": [
                f"{contents[0]} naturally fused with {contents[1]}",
                f"{contents[0]} and {contents[1]} as part of living ecosystem",
                f"{contents[0]} blooming from {contents[1]} like a flower"
            ],
            "mechanical": [
                f"{contents[0]} mechanically connected to {contents[1]}",
                f"cybernetic fusion of {contents[0]} and {contents[1]}",
                f"{contents[0]} as bio-mechanical hybrid with {contents[1]}"
            ]
        }

        # 다중 이미지일 경우 추가 융합
        if len(contents) > 2:
            additional_objects = ", ".join(contents[2:])
            base_prompt = random.choice(fusion_templates[fusion_style])
            fusion_prompt = f"{base_prompt}, surrounded by {additional_objects}"
        else:
            fusion_prompt = random.choice(fusion_templates[fusion_style])

        # 품질 향상 키워드 추가
        quality_keywords = "highly detailed, artistic composition, masterpiece, 8k resolution"
        final_prompt = f"{fusion_prompt}, {quality_keywords}"

        print(f"생성된 프롬프트: {final_prompt}")
        return final_prompt

    # reference image를 기반으로 초기 캔버스를 생성
    def create_base_canvas(self, reference_images, canvas_size=512):

        print("초기 캔버스 생성 중...")

        if not reference_images:
            # 빈 캔버스
            return Image.new('RGB', (canvas_size, canvas_size), 'white')

        # 첫 번째 이미지를 베이스로 사용
        base_img = reference_images[0]['image']

        # 정사각형으로 크롭 및 리사이즈
        min_dim = min(base_img.size)
        left = (base_img.width - min_dim) // 2
        top = (base_img.height - min_dim) // 2

        cropped = base_img.crop((left, top, left + min_dim, top + min_dim))
        canvas = cropped.resize((canvas_size, canvas_size))

        return canvas

    # 중요 내용 - 창조적 융합 실행
    def creative_fusion(self, images, fusion_style="surreal", strength=0.8):

        print("창조적 융합 시작!")

        if len(images) < 2:
            print("최소 2장의 이미지가 필요합니다.")
            return None

        # 1단계: 이미지 내용 분석
        print("이미지 내용 분석 중...")
        image_contents = []
        for img_data in images[:5]:  # 최대 5장까지 분석
            content = self.analyze_image_content(img_data['image'])
            image_contents.append(content)
            print(f"{img_data['filename']}: {content}")

        # 2단계: 융합 프롬프트 생성
        print("융합 프롬프트 생성 중...")
        fusion_prompt = self.create_fusion_prompt(image_contents, fusion_style)

        # 3단계: 초기 캔버스 준비
        print("초기 캔버스 준비 중...")
        base_canvas = self.create_base_canvas(images)

        # 4단계: Stable Diffusion으로 창조적 융합
        print("AI 창조적 융합 실행 중...")
        try:
            result = self.sd_pipeline(
                prompt=fusion_prompt,
                image=base_canvas,
                strength=strength,  # 높을수록 더 창조적
                num_inference_steps=30,
                guidance_scale=8.0,
                num_images_per_prompt=1
            ).images[0]

            print("창조적 융합 완료!")
            return result, fusion_prompt

        except Exception as e:
            print(f"융합 실패: {e}")
            return None, fusion_prompt

    # 스타일 이미지를 분석해서 특징으로 추출
    def analyze_style_images(self, style_images):

        print("스타일 이미지 분석 중...")

        style_descriptions = []
        for style_img in style_images:
            description = self.analyze_image_content(style_img['image'])
            style_descriptions.append(description)
            print(f"{style_img['filename']}: {description}")

        # 스타일 키워드 추출 (임시로 간단한 방식)
        style_keywords = []
        common_art_terms = [
            "painting", "oil", "watercolor", "impressionist", "abstract",
            "colorful", "vibrant", "brush strokes", "artistic", "canvas"
        ]

        for desc in style_descriptions:
            for term in common_art_terms:
                if term in desc.lower():
                    style_keywords.append(term)

        # 중복 제거
        unique_keywords = list(set(style_keywords))
        style_prompt = ", ".join(unique_keywords) if unique_keywords else "artistic style"

        print(f"추출된 스타일: {style_prompt}")
        return style_prompt

    # 융합된 이미지에 스타일을 적용
    def apply_style(self, fused_image, style_prompt, strength=0.6):

        print("스타일 적용 중...")

        try:
            styled_result = self.sd_pipeline(
                prompt=f"in the style of {style_prompt}, artistic masterpiece",
                image=fused_image,
                strength=strength,
                num_inference_steps=25,
                guidance_scale=7.0
            ).images[0]

            print("스타일 적용 완료!")
            return styled_result

        except Exception as e:
            print(f"스타일 적용 실패: {e}")
            return fused_image

    # 스타일 이미지 갤러리 폴더 생성 및 안내
    def setup_style_gallery(self, style_gallery_folder="/content/style_gallery"):

        os.makedirs(style_gallery_folder, exist_ok=True)

        print(f"스타일 갤러리 폴더 생성: {style_gallery_folder}")
        print("이 폴더에 고흐, 피카소 등의 스타일 이미지들을 넣어주세요!")
        print("예시: van_gogh_starry_night.jpg, picasso_guernica.jpg 등")

        return style_gallery_folder

    # 전체 프로세스 실행
    def full_creative_process(self, user_images_folder="/content/user_images",
                           style_gallery_folder="/content/style_gallery",
                           output_folder="/content/creative_results"):

        print("전체 프로세스 시작!")
        print(f"사용자 이미지 폴더: {user_images_folder}")
        print(f"스타일 갤러리 폴더: {style_gallery_folder}")

        # 출력 폴더 생성
        os.makedirs(output_folder, exist_ok=True)

        # 사용자 융합용 이미지 로드
        print("\n사용자 업로드 이미지 로드 중...")
        fusion_images = self.load_images(user_images_folder)
        if len(fusion_images) < 2:
            print("융합용 이미지가 부족합니다 (최소 2장 필요)")
            print(f"{user_images_folder} 폴더에 이미지를 넣어주세요!")
            return None

        # 스타일 갤러리 이미지 로드
        print("\n스타일 갤러리 이미지 로드 중...")
        style_images = self.load_images(style_gallery_folder)
        if not style_images:
            print("스타일 이미지가 없습니다. 융합만 진행합니다.")

        # 3단계: 창조적 융합
        print("\n창조적 융합 실행 중...")
        fused_image, fusion_prompt = self.creative_fusion(fusion_images)
        if fused_image is None:
            return None

        # 융합 결과 저장
        fusion_path = f"{output_folder}/creative_fusion.png"
        fused_image.save(fusion_path)
        print(f"융합 결과 저장: {fusion_path}")

        # 4단계: 스타일 적용
        final_result = fused_image
        if style_images:
            print("\nAI 스타일 학습 및 적용 중...")
            style_prompt = self.analyze_style_images(style_images)
            final_result = self.apply_style(fused_image, style_prompt)

            # 최종 결과 저장
            final_path = f"{output_folder}/final_styled_artwork.png"
            final_result.save(final_path)
            print(f"최종 결과 저장: {final_path}")

        print("\n 전체 프로세스 완료!")

        return {
            'fused_image': fused_image,
            'final_result': final_result,
            'fusion_prompt': fusion_prompt,
            'num_fusion_images': len(fusion_images),
            'num_style_images': len(style_images) if style_images else 0
        }


# 사용 예시 함수들
# 폴더 구조 설정
def setup_folders():
    """폴더 구조 설정"""
    system = CreativeFusionSystem()

    # 사용자 이미지 폴더 생성
    user_folder = "/content/user_images"
    os.makedirs(user_folder, exist_ok=True)
    print(f"사용자 이미지 폴더 생성: {user_folder}")
    print("이 폴더에 해마, 면봉, 나무 등 합성할 이미지들을 넣어주세요!")

    # 스타일 갤러리 폴더 설정
    style_folder = system.setup_style_gallery()

    return user_folder, style_folder

def test_creative_fusion():
    """창조적 융합 테스트"""

    system = CreativeFusionSystem()

    result = system.full_creative_process(
        user_images_folder="/content/user_images",      # 사용자 업로드 이미지
        style_gallery_folder="/content/style_gallery",  # 당신이 준비한 스타일 이미지
        output_folder="/content/results"
    )

    if result:
        print(f"융합: {result['num_fusion_images']}장, 스타일: {result['num_style_images']}장")
        print("창조적 작품 완성!")
        # 결과 이미지 표시
        result['fused_image'].show()
        if result['final_result'] != result['fused_image']:
            result['final_result'].show()

    return result

def quick_fusion_test():
    """빠른 융합 테스트 (스타일 없이)"""

    system = CreativeFusionSystem()

    result = system.full_creative_process(
        user_images_folder="/content/user_images",
        style_gallery_folder=None,  # 스타일 적용 없음
        output_folder="/content/quick_results"
    )

    return result

# 실행
if __name__ == "__main__":
    print("Phase 1: 기술 검증 - 창조적 융합 시스템")
    print("\n폴더 구조:")
    print("├── /content/user_images/     ← 사용자가 업로드할 합성용 이미지")
    print("├── /content/style_gallery/   ← 당신이 준비한 스타일 이미지")
    print("└── /content/results/         ← 생성된 결과물")

    print("\n사용법:")
    print("1. setup_folders() - 폴더 구조 생성")
    print("2. test_creative_fusion() - 전체 프로세스 테스트")
    print("3. quick_fusion_test() - 융합만 테스트")

    # 폴더 설정
    # setup_folders()

    # 테스트 실행
    # test_creative_fusion()

# ==================================================
# 셀 3: 폴더 설정 (이미지는 폴더에 직접 업로드 하시면 됩니다.)
# ==================================================
# 폴더 설정
user_folder, style_folder = setup_folders()

print("폴더 준비 완료!")
print(f"사용자 이미지 업로드: {user_folder}")
print(f"스타일 이미지 업로드: {style_folder}")
print("\n이제 해당 폴더들에 이미지를 업로드해주세요!")
print("- 사용자 폴더: 해마, 면봉, 나무 등 합성할 이미지들")
print("- 스타일 폴더: 고흐, 피카소 등 스타일 참조 이미지들")

# ==================================================
# 셀 4: 업로드된 이미지 확인
# ==================================================
import matplotlib.pyplot as plt

def show_images_in_folder(folder_path, title):
    images = []
    filenames = []

    for filename in os.listdir(folder_path):
        if filename.lower().endswith(('.jpg', '.jpeg', '.png')):
            img_path = os.path.join(folder_path, filename)
            img = Image.open(img_path)
            images.append(img)
            filenames.append(filename)

    # 이미지가 없을 때
    if not images:
        print(f"{folder_path}에 이미지가 없습니다!")
        print("먼저 이미지를 업로드해주세요!")
        return

    fig, axes = plt.subplots(1, len(images), figsize=(15, 4))
    fig.suptitle(title, fontsize=16)

    if len(images) == 1:
        axes = [axes]

    for i, (img, filename) in enumerate(zip(images, filenames)):
        axes[i].imshow(img)
        axes[i].set_title(filename)
        axes[i].axis('off')

    plt.tight_layout()
    plt.show()

# 이미지 확인
print("업로드된 사용자 이미지들:")
show_images_in_folder(user_folder, "사용자 업로드 이미지 (합성용)")

print("\n업로드된 스타일 이미지들:")
show_images_in_folder(style_folder, "스타일 갤러리 이미지")

# ==================================================
# 셀 5: 창조적 융합 테스트 실행
# ==================================================
print("창조적 융합 테스트 시작!")
print("약 2-3분 소요 예정...")

# 전체 프로세스 테스트
result = test_creative_fusion()

if result:
    print("\n테스트 성공!")
    print(f"통계:")
    print(f"- 융합 이미지: {result['num_fusion_images']}장")
    print(f"- 스타일 이미지: {result['num_style_images']}장")
    print(f"- 융합 프롬프트: {result['fusion_prompt']}")

    # 결과 이미지들 비교 표시
    fig, axes = plt.subplots(1, 2, figsize=(12, 6))

    axes[0].imshow(result['fused_image'])
    axes[0].set_title("1단계: 창조적 융합")
    axes[0].axis('off')

    axes[1].imshow(result['final_result'])
    axes[1].set_title("2단계: 스타일 적용")
    axes[1].axis('off')

    plt.suptitle("최종 결과 비교", fontsize=16)
    plt.tight_layout()
    plt.show()

else:
    print("테스트 실패!")

